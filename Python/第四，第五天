4.7 深入函数定义
默认的参数值只在函数定义的范围计算一次；如果默认值是可变的对象，这样会造成一些区别
def f(a, L=[]):
    L.append(a)
    return L

print(f(1))
print(f(2))
print(f(3))

输出
[1]
[1, 2]
[1, 2, 3]
而不是
[1]
[2]
[3]

函数可以使用键-值关键词的参数形式调用，这样可以不用按顺序调用参数了
>>>def girl(name,national = 'china',sexual= 'normal'):
...    print('the girl \'s name is ', name)
...    print('national is ', national)
...    print('sexual is', sexual)

>>>girl(name='cherry',sexual='raws')

the girl 's name is  cherry
national is  china
sexual is raws

当存在一个形参的形式是*name，可以不是最后的参数，它接收整个元组，就是无key值的参数
>>> def game_teams(*name):
...     for n in name:
...         print('this team \'s name :', n)
... 
>>> game_teams('Rock','Bee','Lake')
this team 's name : Rock
this team 's name : Bee
this team 's name : Lake

>>> game_teams('Rock','Bee','Lake',super='Big Cow')
这样调用会出现错误，因为参数没有声明super，而前面的三个参数都被*name占用了

当存在最后的一个形参的形式是**name，它接收整个字典，就是有key值的参数；
*name发生在**name前面

def cheeseshop(kind, *arguments, **keywords):
    print("-- Do you have any", kind, "?")
    print("-- I'm sorry, we're all out of", kind)
    for arg in arguments:
        print(arg)
    print("-" * 40)
    keys = sorted(keywords.keys())
    for kw in keys:
        print(kw, ":", keywords[kw])
调用：
cheeseshop("Limburger", "It's very runny, sir.",
           "It's really very, VERY runny, sir.",
           shopkeeper="Michael Palin",
           client="John Cleese",
           sketch="Cheese Shop Sketch")
输出：
-- Do you have any Limburger ?
-- I'm sorry, we're all out of Limburger
It's very runny, sir.
It's really very, VERY runny, sir.
----------------------------------------
client : John Cleese
shopkeeper : Michael Palin
sketch : Cheese Shop Sketch

拆包参数列表
>>> list(range(3, 6))            # 使用分离的参数正常的调用
[3, 4, 5]
>>> args = [3, 6]
>>> list(range(*args))            # 使用从参数list拆包调用
[3, 4, 5]

字典类型也可以
>>> def parrot(voltage, state='a stiff', action='voom'):
...     print("-- This parrot wouldn't", action, end=' ')
...     print("if you put", voltage, "volts through it.", end=' ')
...     print("E's", state, "!")
...
>>> d = {"voltage": "four million", "state": "bleedin' demised", "action": "VOOM"}
>>> parrot(**d)
-- This parrot wouldn't VOOM if you put four million volts through it. E's bleedin' demised !

Lambda表达式
短小的匿名函数可以用lambda关键字创建，也就是说lamba表达式返回值是函数
>>> def make_incrementor(n):
...     return lambda x: x + n
...
>>> f = make_incrementor(42)
>>> f(0)
42
>>> f(1)
43

上面的例子用lambda表达式返回函数，另一个用法是用短小的函数做参数
>>> pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]
>>> pairs.sort(key=lambda pair: pair[1])
>>> pairs
[(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]

文档字符串
函数体的第一行为文档注释
如果有多行文档注释，第一行为简短的描述，第二行为空白行，以下的为主体描述

函数注解




